{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Bake A Bash-based Make alternative Content For reference, see API and Config For tips, see Tips","title":"Bake"},{"location":"#bake","text":"A Bash-based Make alternative","title":"Bake"},{"location":"#content","text":"For reference, see API and Config For tips, see Tips","title":"Content"},{"location":"api/","text":"Bake Bake: A Bash-based Make alternative Overview Bake is a dead-simple task runner used to quickly cobble together shell scripts In a few words, Bake lets you call the following 'print' task with './bake print' #!/usr/bin/env bash task.print() { printf '%s\\n' 'Contrived example' } Learn more about it on GitHub Index bake.die() bake.warn() bake.info() bake.assert_nonempty() bake.assert_not_empty() bake.assert_cmd() bake.cfg() bake.die() Prints $1 formatted as an error and the stacktrace to standard error, then exits with code 1 Arguments $1 (string): Text to print bake.warn() Prints $1 formatted as a warning to standard error Arguments $1 (string): Text to print bake.info() Prints $1 formatted as information to standard output Arguments $1 (string): Text to print bake.assert_nonempty() Dies if any of the supplied variables are empty. Deprecated in favor of 'bake.assert_not_empty' Arguments ... (string): Names of variables to check for emptiness See also bake.assert_not_empty bake.assert_not_empty() Dies if any of the supplied variables are empty Arguments ... (string): Names of variables to check for emptiness bake.assert_cmd() Dies if a command cannot be found Arguments $1 (string): Command name to test for existence bake.cfg() Change the behavior of Bake. See guide.md for details Arguments $1 (string): Name of config property to change $2 (string): New value of config property","title":"Bake"},{"location":"api/#bake","text":"Bake: A Bash-based Make alternative","title":"Bake"},{"location":"api/#overview","text":"Bake is a dead-simple task runner used to quickly cobble together shell scripts In a few words, Bake lets you call the following 'print' task with './bake print' #!/usr/bin/env bash task.print() { printf '%s\\n' 'Contrived example' } Learn more about it on GitHub","title":"Overview"},{"location":"api/#index","text":"bake.die() bake.warn() bake.info() bake.assert_nonempty() bake.assert_not_empty() bake.assert_cmd() bake.cfg()","title":"Index"},{"location":"api/#bakedie","text":"Prints $1 formatted as an error and the stacktrace to standard error, then exits with code 1","title":"bake.die()"},{"location":"api/#arguments","text":"$1 (string): Text to print","title":"Arguments"},{"location":"api/#bakewarn","text":"Prints $1 formatted as a warning to standard error","title":"bake.warn()"},{"location":"api/#arguments_1","text":"$1 (string): Text to print","title":"Arguments"},{"location":"api/#bakeinfo","text":"Prints $1 formatted as information to standard output","title":"bake.info()"},{"location":"api/#arguments_2","text":"$1 (string): Text to print","title":"Arguments"},{"location":"api/#bakeassert_nonempty","text":"Dies if any of the supplied variables are empty. Deprecated in favor of 'bake.assert_not_empty'","title":"bake.assert_nonempty()"},{"location":"api/#arguments_3","text":"... (string): Names of variables to check for emptiness","title":"Arguments"},{"location":"api/#see-also","text":"bake.assert_not_empty","title":"See also"},{"location":"api/#bakeassert_not_empty","text":"Dies if any of the supplied variables are empty","title":"bake.assert_not_empty()"},{"location":"api/#arguments_4","text":"... (string): Names of variables to check for emptiness","title":"Arguments"},{"location":"api/#bakeassert_cmd","text":"Dies if a command cannot be found","title":"bake.assert_cmd()"},{"location":"api/#arguments_5","text":"$1 (string): Command name to test for existence","title":"Arguments"},{"location":"api/#bakecfg","text":"Change the behavior of Bake. See guide.md for details","title":"bake.cfg()"},{"location":"api/#arguments_6","text":"$1 (string): Name of config property to change $2 (string): New value of config property","title":"Arguments"},{"location":"config/","text":"Config Currently, there are three runtime configuration options with bake.cfg stacktrace Prints a stacktrace when a task fails. This isn't enabled by default since the failed task is rarely an issue with Bake, but the underlying command line tool it executes. Disabling it by defualt prevents unecessary clogging of the terminal pedantic-task-cd Ensures that the $PWD will always be correct when running a task. Nearly always it is, with the only exception occuring for the case where a directory is changed within a task, and another task is manually ran This isn't enabled by default since it traps DEBUG (and therefore feels messy) big-print Big decorative lines are printed before and after execution of a task. This helps seeing which task is printed, but sometimes it can get in the way This config switch only works if bake.cfg ... is called either: On the first line of a task.<TASK>() function On the first line of the init() function Like so: task.test() { bake.cfg 'decorative-print' 'off' } This is enabled by default","title":"Config"},{"location":"config/#config","text":"Currently, there are three runtime configuration options with bake.cfg","title":"Config"},{"location":"config/#stacktrace","text":"Prints a stacktrace when a task fails. This isn't enabled by default since the failed task is rarely an issue with Bake, but the underlying command line tool it executes. Disabling it by defualt prevents unecessary clogging of the terminal","title":"stacktrace"},{"location":"config/#pedantic-task-cd","text":"Ensures that the $PWD will always be correct when running a task. Nearly always it is, with the only exception occuring for the case where a directory is changed within a task, and another task is manually ran This isn't enabled by default since it traps DEBUG (and therefore feels messy)","title":"pedantic-task-cd"},{"location":"config/#big-print","text":"Big decorative lines are printed before and after execution of a task. This helps seeing which task is printed, but sometimes it can get in the way This config switch only works if bake.cfg ... is called either: On the first line of a task.<TASK>() function On the first line of the init() function Like so: task.test() { bake.cfg 'decorative-print' 'off' } This is enabled by default","title":"big-print"},{"location":"tips/","text":"Tips Some recommendations for using Bake efficiently Conventions I often order my tasks by natural execution order. For example task.init() task.dev() task.build() task.run() task.serve task.release() task.publish() When applicable, I have an idempotent task.init task for executing right after cloning the repository. If you use Hookah , this is a perfect place to run that task.init() { hookah refresh git submodule update --init --recursive pnpm install } API Usage There are no booby traps in the API, so I'll just tell you what I do if you're looking for some rules Use bake.assert_not_empty() whenever positional parameters are accessed. For failing fast with a clear error message Use bake.assert_cmd() only for commands that are used after another long-running command. Doing this for every external command is too much of a maintenance chore","title":"Tips"},{"location":"tips/#tips","text":"Some recommendations for using Bake efficiently","title":"Tips"},{"location":"tips/#conventions","text":"I often order my tasks by natural execution order. For example task.init() task.dev() task.build() task.run() task.serve task.release() task.publish() When applicable, I have an idempotent task.init task for executing right after cloning the repository. If you use Hookah , this is a perfect place to run that task.init() { hookah refresh git submodule update --init --recursive pnpm install }","title":"Conventions"},{"location":"tips/#api-usage","text":"There are no booby traps in the API, so I'll just tell you what I do if you're looking for some rules Use bake.assert_not_empty() whenever positional parameters are accessed. For failing fast with a clear error message Use bake.assert_cmd() only for commands that are used after another long-running command. Doing this for every external command is too much of a maintenance chore","title":"API Usage"}]}